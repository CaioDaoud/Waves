#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <vector>
#include <iostream>
#include <algorithm>
#include <list>

#include "../../../libs-iw/indexer/include/IndiceInvertido.h"
#include "../../../libs-iw/indexer/include/LeitorLista.h"
#define MAX_SIM 1000000
#define DIST 100000
using namespace std;

typedef struct lista_invertida_doc { //Struct da Lista Invertida ordenada por Documento
	unsigned int doc;
	unsigned int freq;
	float score;
} lista_doc;

bool compareScore(const lista_doc& first, const lista_doc& second) { //Funcao usada no algoritmo Sort (para ordenar por frequencia a Lista Invertida)
	if (first.score == second.score)	return first.doc < second.doc;
	return first.score > second.score;
}

bool compareDocid(const lista_doc& first, const lista_doc& second) { //Funcao usada no algoritmo Sort (para ordenar por frequencia a Lista Invertida)
	return first.doc < second.doc;
}

int main(int argc, char **argv)
{
  FILE *fft;
   float pre; // precalculo da similaridade do BM25
  unsigned int doc_gap;
	long *freq1 = new long[MAX_SIM];
	memset(freq1, 0, MAX_SIM*sizeof(long));
	int sim_merge=0;
	
	if(argc != 6)
	{
		printf("Execute:\n\t%s <path_indice> <firt_tier> <second_tier> <porcentagem> <1->UTI; 2->Vetorial; 3->BM25>\n", argv[0]);
		exit(1);
	}

	int tipo_score= atoi(argv[5]);
	float perc = atof(argv[4]);
	float minScore;
	time_t start = time(NULL);
	FILE *fidx = NULL;
	FILE *ftermo1 = NULL;
	FILE *ftermo2 = NULL;
	FILE *ftermo_out=NULL; // indice com correcao da compressao sem +1
	FILE *fidx_fracao1 = NULL;
	FILE *fidx_fracao2 = NULL;
	FILE *fmin_score = NULL;
	FILE *fidx_fracao1LastDoc = NULL;
	FILE *fidx_fracao2LastDoc = NULL;
	FILE *fidxLastDoc = NULL;
	FILE *fidx_out;
	IDX idx;
	IDX idx_fracao1;
	IDX idx_fracao2;
	IDX idx_out;

	int term_id = 0;

	int id_arq_ant = -1;
	char arq[4096];
	LeitorLista leitor;

	if(tipo_score == 1) {
		printf("Gerando indice de impacto de UTI\n");
	}
	else if(tipo_score == 2) {
		printf("Gerando indice de impacto de VETORIAL\n");
	}else if(tipo_score == 3) {
		printf("Gerando indice de impacto de BM25\n");
	}

	_tipo_buffer *buffer_lista_freq = new _tipo_buffer[SIZE_BUFFER_LEITOR_LISTA+SIZE_FOLGA_LEITOR_LISTA];
	_tipo_buffer *out_freq;
	unsigned char btat_freq;
	
	// Criando arquivo auxiliar para lastdocs
	
	sprintf(arq, "%s%s.lastdoc", argv[1], NOME_IDX);
	if((fidxLastDoc = fopen(arq, "w+")) == NULL)
	  {
	    printf("Nao foi possivel criar o arquivo de idxLastDoc %s\n", arq);
	    exit(1);
	  }
	
	
	
	sprintf(arq, "%s%s", argv[1], NOME_IDX);
	if((fidx = fopen(arq, "r")) == NULL)
	  {
	    printf("Nao foi possivel abrir o arquivo de idx %s\n", arq);
	    exit(1);
	  }
	
	// cria o arquivo de IDX do indice corrigido sem +1
	sprintf(arq, "%s%s%s", argv[1], "FIX",NOME_IDX);
	if((fidx_out = fopen(arq, "w+")) == NULL)
	  {
	    printf("Nao foi possivel criar o arquivo de idx %s\n", arq);
	    exit(1);
	  }
	
	
	sprintf(arq, "%s%s", argv[2], NOME_IDX);
	if((fidx_fracao1 = fopen(arq, "w+")) == NULL)
	  {
	    printf("Nao foi possivel criar o arquivo de idx do termo a termo %s\n", arq);
	    exit(1);
	  }
	sprintf(arq, "%s%s", argv[3], NOME_IDX);
	if((fidx_fracao2 = fopen(arq, "w+")) == NULL)
	  {
	    printf("Nao foi possivel criar o arquivo de idx do termo a termo %s\n", arq);
	    exit(1);
	  }
	
	
	
	sprintf(arq, "%s%s.lastdoc", argv[2], NOME_IDX);
	if((fidx_fracao1LastDoc = fopen(arq, "w+")) == NULL)
	  {
	    printf("Nao foi possivel criar o arquivo de idx do termo a termo lastdoc%s\n", arq);
	    exit(1);
	  }
	sprintf(arq, "%s%s.lastdoc", argv[3], NOME_IDX);
	if((fidx_fracao2LastDoc = fopen(arq, "w+")) == NULL)
	  {
	    printf("Nao foi possivel criar o arquivo de idx do termo a termo lastDoc, segunda camada %s\n", arq);
	    exit(1);
	  }
	
	
	
	
	
    sprintf(arq, "%smin_score", argv[2]);
    fmin_score = fopen(arq, "w");
    
    size_t size;
    float *vetIdf;
    unsigned *ft;
    float *vetNorm;
    unsigned int totalNDocs;
    
    //printf("tipo_score == %d - %s%s\n",tipo_score ,argv[1], NOME_IDF);
    if(tipo_score != 1) {
      printf("tipo_score diferente de 1 %s%s\n",argv[1], NOME_IDF);
      sprintf(arq, "%s%s", argv[1], NOME_IDF);
      FILE *fidf, *fnorma;
      
      if((fidf = fopen(arq, "r+")) == NULL)
        {
	  printf("Nao foi possivel abrir o arquivo de idf %s\n", arq);
	  exit(1);
        }
      fseek(fidf, 0, SEEK_END);
      size = ftell(fidf)/sizeof(float);
      vetIdf = new float[size];
      fseek(fidf, 0, SEEK_SET);
      fread(vetIdf, size, sizeof(float), fidf);
      fclose(fidf);
      

      sprintf(arq, "%s%s", argv[1], "FT");
      if((fft = fopen(arq, "w")) == NULL)
        {
	  printf("Nao foi possivel criar o arquivo de ft %s\n", arq);
	  exit(1);
        }



      sprintf(arq, "%s%s", argv[1], NOME_NORMA);
      if((fnorma = fopen(arq, "r+")) == NULL)
        {
	  printf("Nao foi possivel abrir o arquivo de norma %s\n", arq);
	  exit(1);
        }
      fseek(fnorma, 0, SEEK_END);
      size = ftell(fnorma)/sizeof(float);
      vetNorm = new float[size];
      totalNDocs = size;
      fseek(fnorma, 0, SEEK_SET);
      fread(vetNorm, size, sizeof(float), fnorma);
      fclose(fnorma);
    

    // CRIA NORMA CORRIGIDA (SEM +1)
    sprintf(arq, "%s%s%s", argv[1],"FIX", NOME_NORMA);
    if((fnorma = fopen(arq, "w+")) == NULL)
      {
	printf("Nao foi possivel criar o arquivo de norma %s\n", arq);
	exit(1);
      }
     float *vetNormFix = vetNorm;
      vetNormFix--;
      fwrite(vetNormFix, size+1, sizeof(float), fnorma);
     totalNDocs = size+1;
    fclose(fnorma);
    // FIM DO NORMA CORRIGIDA CRIADA SEM +1
    }

    while(1){
	  fread( &idx, sizeof(IDX), 1, fidx );
	  if(feof(fidx))	break;
	  
	  
	  idx_fracao1.id_arq = idx.id_arq;
	  idx_fracao1.freq_inicio_termo = 0;
	  idx_fracao1.freq_tam_lista = 0;
	  
	  idx_fracao2.id_arq = idx.id_arq;
	  idx_fracao2.freq_inicio_termo = 0;
	  idx_fracao2.freq_tam_lista = 0;

	  idx_out.id_arq = idx.id_arq;
	  idx_out.freq_inicio_termo = 0;
	  idx_out.freq_tam_lista = 0;

	  fwrite(&idx.freq_tam_lista,sizeof(unsigned),1,fft); 
	  if(idx.freq_tam_lista == 0)
	    {
	      fwrite(&idx_fracao1, sizeof(IDX), 1, fidx_fracao1);
	      fwrite(&idx_fracao2, sizeof(IDX), 1, fidx_fracao2);
	      fwrite(&idx_out, sizeof(IDX), 1, fidx_out);
	     
	      // printf("term_id %d LastDoc -1\n",term_id);
	      { int temp = -1;
		fwrite(&temp, sizeof(int),1,fidxLastDoc);
		fwrite(&temp, sizeof(int),1,fidx_fracao1LastDoc);
		fwrite(&temp, sizeof(int),1,fidx_fracao2LastDoc);
	      }
	      term_id++;
	      continue;
	    }
	  
	  /**Abre o arquivo de listas de frequencia*/
	  sprintf( arq, "%s%s%d", argv[1], NOME_FREQUENCIA, idx.id_arq );
	  leitor.Inicializa(arq, idx.freq_tam_lista, idx.freq_inicio_termo);
	 
	  if(id_arq_ant != idx.id_arq){
	    if(ftermo1)	fclose(ftermo1);
	    /*Cria o arquivo de skiplist para a primeira camada*/
	    sprintf( arq, "%s%s%d", argv[2], NOME_FREQUENCIA, idx.id_arq );
	    ftermo1 = fopen( arq, "w+");
	    
            if(ftermo2)     fclose(ftermo2);
            /*Cria o arquivo de skiplist para a segunda camada*/
            sprintf( arq, "%s%s%d", argv[3], NOME_FREQUENCIA, idx.id_arq );
            ftermo2 = fopen( arq, "w+");
	    if(ftermo_out)     fclose(ftermo_out);
            /*Cria o arquivo de skiplist para o  indice corrigido*/
	    sprintf( arq, "%s%s%s%d", argv[1], NOME_FREQUENCIA,"FIX",idx.id_arq );
            ftermo_out = fopen( arq, "w+");
	  
  
	    id_arq_ant = idx.id_arq;
	  }

	  

	  
	  vector <lista_doc> doc_a_doc;
	  vector <lista_doc> doc_a_doc_second;
	  lista_doc ld_aux;
	  pre = (float)3 * (float)(log( 1 + (float)(totalNDocs - idx.freq_tam_lista + 0.5)/(float)(idx.freq_tam_lista + 0.5))/log(2));
	  /**Calcula o score de cada documento e o add na lista de documentos*/
	  while(leitor.getDoc(&(ld_aux.doc), &(ld_aux.freq)))
	    {
	      //cout << "doc id" << ld_aux.doc <<endl;
	      //if(ld_aux.doc > 20000000){ continue; cout<<"descartou "<<endl;}
	      //cout<<"descartou "<< ld_aux.doc<<endl;
	      if(tipo_score == 1)
		{
		  /*UTI*/
		  ld_aux.score = ld_aux.freq;
		}
	      else if(tipo_score == 2)
		{
		  /*Vetorial*/
		  ld_aux.score = ld_aux.freq * vetIdf[term_id] / vetNorm[ld_aux.doc];
		}else if(tipo_score == 3)
		{
		  /*BM25 com k1=2; b=0.75*/
		  // float tmpScore = (ld_aux.freq * vetIdf[term_id] * 3.0) / (ld_aux.freq + 2.0 * ( 0.25 + 0.75 * vetNorm[ld_aux.doc]) );
		  // Formula abaixo e usada pelo DING
		 
		  ld_aux.score = pre*(float)(ld_aux.freq) / ((float)(ld_aux.freq + 2 * ( 0.25 + 0.75 * (float)(vetNorm[ld_aux.doc])/(float)(130))));
		  // printf("antes: %.5f depois: %.5f\n",tmpScore,ld_aux.score);
		}
	      
	      sim_merge = (int)(ld_aux.score*DIST);
	      if(sim_merge > MAX_SIM-1)	sim_merge = MAX_SIM-1;
	      freq1[sim_merge]++;
	      
	      doc_a_doc.push_back(ld_aux);
	    }
	  //	printf("termo %d LastDoc %d\n",term_id,ld_aux.doc);
	  // grava saida do lastdoc para indice completo
	  // CODIGO DE FIX
	  ld_aux.doc++;
	  fwrite(&ld_aux.doc, sizeof(int),1,fidxLastDoc);
	  

	  /********************
        grava indice modificado: gera o indice corrigido para o processador de consultas sem o +1 na compressao ****************************/

	  
	  /**Guarda o tamanho da indice*/
	  idx_out.freq_tam_lista = doc_a_doc.size();
	  
	  idx_out.freq_inicio_termo = ftell(ftermo_out);
	  fwrite(&idx_out, sizeof(IDX), 1, fidx_out);
	  
	  doc_gap= 0; 
	  
	  buffer_lista_freq[0] = 0;
	  out_freq = buffer_lista_freq;
	  btat_freq = 0;
	  // SOMA 1 a todos os documentos na hora de comprimir
	  for(int i=0; i<doc_a_doc.size(); i++)
	    {

	      if(term_id == 455) {
		printf("codificando %d %d\n",doc_a_doc[i].doc+1,doc_a_doc[i].freq);
	      }
	      RawDeltaEncode((doc_a_doc[i].doc+1) - doc_gap, out_freq, btat_freq);
	      RawDeltaEncode(doc_a_doc[i].freq, out_freq, btat_freq);
	      
	      doc_gap = (doc_a_doc[i].doc+1);
	      
	      if(out_freq >= &buffer_lista_freq[SIZE_BUFFER_LEITOR_LISTA])
		{
		  
		  fwrite(buffer_lista_freq, sizeof(_tipo_buffer), out_freq-buffer_lista_freq, ftermo_out);
		  buffer_lista_freq[0] = *out_freq;
		  out_freq = buffer_lista_freq;
		}
	    }
	  
	  if(out_freq != buffer_lista_freq)
	    fwrite(buffer_lista_freq, sizeof(_tipo_buffer), out_freq-buffer_lista_freq, ftermo_out);
	  if(btat_freq)
	    fwrite(out_freq, sizeof(_tipo_buffer), 1, ftermo_out);
	  
	  /********* fim da gravacao do indice com correcao *************/

	  
	  /* Ordena por score*/    
	  sort(doc_a_doc.begin(), doc_a_doc.end(),compareScore); 
	  
	  //Seleciona baseado em um limiar e docID
	  idx_fracao1.freq_tam_lista = idx.freq_tam_lista;
	  for(int i=1000; i<doc_a_doc.size(); i++) {
	    
            if(doc_a_doc[i].score < perc) {
	      idx_fracao1.freq_tam_lista = i;
	      break;
            }
	  }    
	  /**/       
	  //       idx_fracao1.freq_tam_lista = doc_a_doc.size();
	  
	  /*
	  //Seleciona listas pequenas
	  if (idx.freq_tam_lista > 100000)    idx_fracao.freq_tam_lista = 1000;
	  else    idx_fracao.freq_tam_lista = idx.freq_tam_lista;
	  */
	  
	  /*
	  //Seleciona porcentagens fixas
	  idx_fracao1.freq_tam_lista = idx.freq_tam_lista * perc / 100.0;
	  if(idx_fracao1.freq_tam_lista < 1000)
	  {
	  if(idx.freq_tam_lista < 1000)
	  idx_fracao1.freq_tam_lista = idx.freq_tam_lista;
	  else
	  idx_fracao1.freq_tam_lista = 1000;
	  }
	  */
	  
	  
	  // if(term_id == 12750){
	  printf("Termo = %d, Lista completa = %d, Ponto de separação = %d\n",term_id, doc_a_doc.size(), idx_fracao1.freq_tam_lista);
	  //	}
	  
	  
	  //if(doc_a_doc[doc_a_doc.size()-1].doc >5000000 || doc_a_doc.size() >5000000){ cout<< "aqui óóóó"<<endl; break;}
	  
	  /**Monta o indice da segundacamada a partir do limiar encontrado*/
	  for(int i=idx_fracao1.freq_tam_lista; i<doc_a_doc.size(); i++) {
	    doc_a_doc_second.push_back(doc_a_doc[i]);
	  }
	  
	  ///Guarda o maior score da segunda camada para ser escrito no arq.  minScre da primeira
	  if(doc_a_doc_second.size()>0){
	    minScore = doc_a_doc[idx_fracao1.freq_tam_lista].score;
	  }else{
	    //cout<<"minScore = 0"<<endl;
	    minScore = 0;
	  }
	  
	  /**Remove da primeira camada os elementos que estram na segunda camada*/
	  doc_a_doc.resize(idx_fracao1.freq_tam_lista);
	  
	  //if(term_id == 12750){
	  printf("\t [%d],  [%d] \n", doc_a_doc.size(), doc_a_doc_second.size());
	  //}
	  
	  /**Ordena os indices das duas camadas por Documento*/
	  sort(doc_a_doc.begin(), doc_a_doc.end(),compareDocid); //Ordenando a lista por docid
	  sort(doc_a_doc_second.begin(), doc_a_doc_second.end(),compareDocid); //Ordenando a lista por docid
	  
	  /**Quarda o tamanho da indice da segunda camada*/
	  idx_fracao2.freq_tam_lista = doc_a_doc_second.size();
	  
	  /** ? Escreve no arquivo correspondente o IDX*/
	  idx_fracao1.freq_inicio_termo = ftell(ftermo1);//ftell() - retorna a posição corrente de leitura ou escrita no arquivo (em bytes)
	  fwrite(&idx_fracao1, sizeof(IDX), 1, fidx_fracao1);
	  
	  idx_fracao2.freq_inicio_termo = ftell(ftermo2);
	  fwrite(&idx_fracao2, sizeof(IDX), 1, fidx_fracao2);
	  
	  ///Escreve minScore (maior score da segnda camda)
	  fwrite(&minScore, 1, sizeof(float), fmin_score);
	  //-----------
	  
	  doc_gap=0;
	  
	  buffer_lista_freq[0] = 0;
	  out_freq = buffer_lista_freq;
	  btat_freq = 0;
	  
	  for(int i=0; i<doc_a_doc.size(); i++)
	    {
	      RawDeltaEncode((doc_a_doc[i].doc+1) - doc_gap, out_freq, btat_freq);
	      RawDeltaEncode(doc_a_doc[i].freq, out_freq, btat_freq);
	      
	      doc_gap = (doc_a_doc[i].doc+1);
	      
	      if(out_freq >= &buffer_lista_freq[SIZE_BUFFER_LEITOR_LISTA])
		{
		  fwrite(buffer_lista_freq, sizeof(_tipo_buffer), out_freq-buffer_lista_freq, ftermo1);
		  buffer_lista_freq[0] = *out_freq;
		  out_freq = buffer_lista_freq;
		}
	    }
	  
	  // escreve lastdoc da primeira camada
	  //printf("ultimo doc da primeira camada %d\n",doc_a_doc[doc_a_doc.size()-1].doc);
	  {  // +1 por fix... correcao da compressao
	    int tmp = doc_a_doc[doc_a_doc.size()-1].doc +1;
	  fwrite(&tmp,sizeof(int),1,fidx_fracao1LastDoc);
	  }
	  if(out_freq != buffer_lista_freq)
	    fwrite(buffer_lista_freq, sizeof(_tipo_buffer), out_freq-buffer_lista_freq, ftermo1);
	  if(btat_freq)
	    fwrite(out_freq, sizeof(_tipo_buffer), 1, ftermo1);
	  
	  //-----------
	  buffer_lista_freq[0] = 0;
	  out_freq = buffer_lista_freq;
	  btat_freq = 0;
	  
	  doc_gap = 0;
	  
	  for(int i=0; i<doc_a_doc_second.size(); i++)
	    {
	      RawDeltaEncode((doc_a_doc_second[i].doc+1) - doc_gap, out_freq, btat_freq);
	      RawDeltaEncode(doc_a_doc_second[i].freq, out_freq, btat_freq);
	      
	      doc_gap = (doc_a_doc_second[i].doc+1);

	      if(out_freq >= &buffer_lista_freq[SIZE_BUFFER_LEITOR_LISTA])
		{
		  fwrite(buffer_lista_freq, sizeof(_tipo_buffer), out_freq-buffer_lista_freq, ftermo2);
		  buffer_lista_freq[0] = *out_freq;
		  out_freq = buffer_lista_freq;
		}
	    }
	  if(doc_a_doc_second.size()) {
	    // escreve lastdoc da segunda camada
	    // printf("ultimo doc da segunda camada %d\n",doc_a_doc_second[doc_a_doc_second.size()-1].doc); 
	    {
	      // +1 para correcao do FIX
	      int tmp =doc_a_doc_second[doc_a_doc_second.size()-1].doc+1;
	    fwrite(&tmp,sizeof(int),1,fidx_fracao2LastDoc);
	    }
	  }
	  else {
	    int temp=-1;
	    //    printf("ultimo doc da segunda camada %d\n",temp);
	    fwrite(&temp, sizeof(int),1,fidx_fracao2LastDoc);
	  }
	  
	  
	  if(out_freq != buffer_lista_freq)
            fwrite(buffer_lista_freq, sizeof(_tipo_buffer), out_freq-buffer_lista_freq, ftermo2);
	  if(btat_freq)
            fwrite(out_freq, sizeof(_tipo_buffer), 1, ftermo2);
	  //---------
	  term_id++;
	}
	
	
	
	if(false){
		printf("\n**********************Distribuicoes**********************\n\n");
		float total=0, parcial=0;
		
		for(int i=MAX_SIM;i>=0; i--)
		{
			total=total+freq1[i];
			//printf("Total de documentos %d\t %d\n", total, freq1[i]);
		}
		printf("---------->  Total de documentos %d\t %d\n", total);
		float p;
		for(int i=MAX_SIM;i>=0; i--)
		{
			parcial= parcial+freq1[i];
			if(parcial>0){
				p=((float)parcial/(float)total)*100;
			
				printf("id : %d \t Freq : %d \t score : %f \t  [%.2f\%] \t Parcial %.2f \t total : %.2f\n", (i),(freq1[i]), (((float)i)/DIST), p, parcial, total);
			}
		}
	
		printf("Total de documentos %d\t", total);	
		
	}

	fclose(fidx);
	fclose(fidxLastDoc);
	fclose(fft);
	fclose(fmin_score);	
	
	fclose(fidx_fracao1);
	fclose(fidx_fracao1LastDoc);
	fclose(fidx_fracao2LastDoc);

	fclose(ftermo1);
	
    fclose(fidx_fracao2);
    fclose(ftermo2);

	free(buffer_lista_freq);

	printf("Indice termo a termo gerado em %.2lf\n", difftime(time(NULL), start)/60);

	return 0;
}
